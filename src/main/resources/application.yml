server:
  port: 8081
  servlet:
    context-path: /gw
logging:
  config: classpath:logback-spring.xml

spring:
  cache:
    redis:
      #是否缓存空值
      cache-null-values: false
  redis:
    host: 192.168.137.211
    port: 6379
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池中的最大空闲连接
        max-idle: 4
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最小空闲连接
        min-idle: 1
      #在关闭客户端连接之前等待任务处理完成的最长时间，在这之后，无论任务是否执行完成，都会被执行器关闭，默认100ms
      shutdown-timeout: 5000

  devtools:
    livereload:
      port: 35732
  cloud:
    gateway:
      httpclient:
        pool:
          max-idle-time: 5000
          max-connections: 30
      default-filters:
        - PreserveHostHeader
        - StripPrefix=1
      routes:
        - id: "user-server"
          uri: "http://localhost:8088"
          predicates:
            - Path=${server.servlet.context-path}/sun/**

aka:
  gateway:
    myfilter:
      #使用ant path路径风格匹配
      matcher:
        #哪些URL需要进行经过此过滤器
        paths:
          - /sun/**
      verify-config:
        token-type: jwt
        #哪些URL不需要检测token是否存在和有效，使用ant path路径风格匹配
        exclude-paths:
#         - abc.action
        #用于生成token的key
        secret: hong1mu2zhi3ruan4jexge_33@#&@sdffian5
        access-token:
          #携带acess token的参数名称
          param-name: access_token
          #秒为单位
          expire: 30
        refresh-token:
          #携带refresh token的参数名称
          param-name: refresh_token
          #秒为单位
          expire: 60
        #请求里携带acess-token和 refresh-token的媒介，有header,query,cookie，可以有多个，以英文逗号分隔
        token-in-request: header,cookie,query
        #响应里携带token的媒介，有header,cookie,body。可以设置多个，以英文逗号分割。当某接口认证成功后会写入
        token-in-response: header,cookie,body
      store-config:
        memory:
          enable: false
        redis:
          enable: true
          #RedisTemplate的bean名称，如果不填写则使用默认的。
#         redis-template-bean-name: redisTemplate
      login:
        - url: /**/usermod-User-gatewayLoginJSON.action
          #需要实现com.github.ulwx.aka.gateway.filters.TokenBuilder接口，
          #根据请求和响应信息生成token信息（access-token，refresh-token等）
          token-builder-class: com.example.gateway.MyTokenBuilder

      logout:
        - url: /**/usermod-User-gatewayLogoutJSON.action
          #获取userid，sourceid，refresh-token信息，以帮助清理存储里的token
          #需实现com.github.ulwx.aka.gateway.filters.FetchLogoutCondition接口
          fetch-logout-condition: com.example.gateway.MyFetchLogoutCondition



